From sklearn.datasets import make_regression # Esse métodoo nos permite criar uma linha de regressão linear com base em dados fictícios 
from sklearn.linear_model import LinearRegression # O parâmetro fit_intercept calcula o coeficiente linear, o parâmetro normalize, normaliza nossos dados do eixo x antes de rodar, 
o parâmetro copy_x por padrão vem True e isso que dizer que ele não vai sobrescrever nossos valores de X, se eu quiser que sobrescreva, colocar False, 
o parâmetro n_jons vc configura quantos nucleos do processador você quer que sua maquina utilize pra rodar o modelo.
É basicamente tentar encontrar uma reta que melhor descreve o comportamento dos dados

A distancia da minha reta com os meus dados é a minha taxa de erro.

x, y = make_regression(n_samples=200, n_features=1, noise=30) # n_samples eu informoo quantos dados eu quero q a função gere pra mim, n_features=1 diz quantas 
variáveis eu quero pegar no caso aqui, estou pegando apenas a variável x,  noise é o ruído, se eu informo zero, eu crio uma reta de regressão linear perfeita,
quanto mais ruiso eu colocar mais diferente de uma reta será, dados mais espalhados.
plt.scatter(x, y)
plt.show()

modelo = LinearRegression() # Criando o modelo
modelo.fit(x, y) # Meu modelo recebe os valores x e y que foram gerados neste exemplo acima pela função make_regression, mas x e y poderiam ser uma lista de valores
modelo.intercept_ # Acessando o coeficiente linear 
modelo.coef_ # Acessando o valor do coeficiente angular da reta do modelo

# Agora que eu possuo os dados da reta posso criar uma função que mostra essa reta pra mim
plt.scatter(x, y)
xreg = np.arrange(-3, -3, 1) # Esses valores passados no arange dizem sobre a variação dos meus dados no eixo X, nesse caso meus dados vão de -3 a 3 variando de 1 em 1
plt.plot(xreg, 65.86*xreg-0.85, color = 'red') # Gráfico de regressão, o 65.86 é o resultado do coeficiente angular(modelo.coef_), -0.85 é o valor do coeficiente
linear(modelo.intercept_), xreg é o valor de x da equação y = mx + b
plt.show()














