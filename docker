#hub.docker.com #repositório oficial do docker


docker run ubuntu #run the oficial ubuntu image, o comando run cria um novo container

docker run -it ubuntu #run the oficial ubuntu image e continue running, deixa o terminal do contâiner disponível

docker run -d name_of_image #Roda em modo detached, em background, ou seja, não fica exposto na CLI

docker run -d -p 80:80 nginx #Expondo porta 80, utilizando a porta 80 do meu computador. Juntando comandos -d com -p

docker run -v /path/que será salvo os arquivos #Criando volume anônimo

docker run -v nome_do_volume:/path/que será salvo os arquivos #Criando volume nomeado

docker run -v nome_do_volume:/path/queserásalvoosarquivos:ro #Criando volume apenas leitura, read only

docker run /dir/data:/data  #Criando volume bind mount, /dir/data é o diretório do nosso computador, será o volume do container

docker ps #Vê quais imagens estão rodando, see what images are running

docker container ls #Funciona igual o docker ps

docker container ls -a #Funciona igual o docker ps -a

docker ps -a #Mostra um histórico de todos os containers que ja rodaram na máquina, show a historic of all runned containers

docker stop name #Stop a container by name

docker stop id #id do container

docker start id ou nome #Inicia um container pelo id ou pelo nome

docker start -i id #Roda container com iteratividade

docker run -d -p 80:80 --name name_of_container nginx #Criando/creating a container and giving a name, nomeando

docker logs name_of_container #Ajuda debugar erros, ver os últimos eventos, error

docker rm name_of_container/id #Removing, reomver um container, se o container estiver rodando vc pode usar o -f para forçar parar.

docker rm name_of_container/id -f #Removing, reomver um container, se o container estiver rodando vc pode usar o -f para forçar parar.

docker image ls #lista todas as imagens que tenho instalada

docker pull nome_da_imagem #Download, baixa a imagem que fica pronta para uso

docker tag id novo_nome:nova_tag #Renaming, renomeando uma imagem

docker build -t nome:tag local

docker rmi nome_da_imagem #Remover uma imagem, posso adicionar o -f para forçar

docker rmi -f nome_da_imagem #Remover uma imagem, posso adicionar o -f para forçar

docker system prune #Remove dados não utilzados, limpa, clear, remove imagens, containers, redes

docker run --rm id ou nome #Remove automaticamente o container depois q ele é parado, bom para ambiente de testes

docker cp nome_container:/path/relativo/file.py ./path/que_quero_copiar #Copia arquivo de um diretório para um container ou vice versa, copy file

docker top nome_do_container #verifica as execuções do container

docker inspect nome_do_container #mostra como o container foi configurado, info, set up

docker stats #Vê o processamento dos containers

docker volume ls  #vê todos os volumes do meu ambiente

docker volume create nome_do_volume #Criando volumes manualmente

docker volume inspect nome_do_volume #Inspeciona o volume

docker volume rm nome_do_volume #Removendo um volume

docker volume prune #Remove volumes em massa

docker network ls #Lista as redes que ue possuo, lists

docker network create nome_da_rede #Cria uma rede, create, por padrão o tipo da rede é bridge

docker network rm nome_da_rede #Removendo uma rede

docker network prune #Remove todas as redes não utilizadas

docker network connect nome_rede id_container #Conectando um container a uma rede

docker network disconnect nome_rede id_container #Desconectando um container a uma rede

docker network inspect noma_da_rede #Inspecionando uma rede
#######################

Executando uma imagem

docker build diretorio_da_imagem

docker run nome_imagem

#######################

#######################
Criando uma imagem, creating Dockerfile

from #especifica uma imagem que servirá de base para a nossa

workdir #diretório que eu passar aqui será o diretório que meu container vai estar, ele será o raiz do container, se vc entrar no terminal do container você cairá diretamente no diretório que foi passado
workdir /path #Exemplo 

env #Cria uma variével de ambiente dentro do meu container
env minha_variável=app.jar  
 
expose #porta da aplicação que vou expor para poder acessar o container de fora
expose 8080 #Exemplo

entrypoint #Funciona parecido com o cmd. Quando o entrypoint e o cmd estão declarados, o cmd entra como parâmetro do entrypoint
entrypoint {"Executable"}

cmd  #Comando que executa uma ação depois que o container é criado
cmd ["ls"] #Exemplo de comando que executa uma listagem no direório dentro do container depois q ele é inicializado

run # Executa um comando dentro do container
run mkdir /aula #Exemplo de run que cria um diretório /aula dentro de um container

add #Faz algo mto parecido com o copy, pode baixar uma url, pode descompactar um arquivo tar
add aula.tar.gz /path/aula/ #Exemplo de add que descompactar o arquivo aula dentro do path que passei

copy #quais arquivos precisam ser copiados, ele busca dentro do drietório que se encontra o docker file
copy aula.txt /path/aula.txt #Exemplo de copy que pega o arquivo aula.txt e copia para dentro da imagem que estou criando no diretório que passei

.dockerignore #Arquivo no qual você adiciona o que não deseja que seja levado para dentro do container

########################

#######################

Enviando uma imagem para o hub

docker login #Q vc criou no site
username
senha

docker push nome_da_imagem

docker pull nome_da_imagem #Puxa a imagem, download, baixa

docker logout
#######################

docker run --name pg14 -e POSTGRES_PASSWORD=postgres --detach --publish 5432:5432 postgres:14 

docker run -it --entrypoint /bin/bash <container_name> # Acessando o container internamente

docker run -it --entrypoint /bin/bash <container_name

####################################

#Restartando conteiners sempre
docker update --restart always cont_modbus_get_all cont_modbus_update cont_modbus_delete cont_modbus_insert
