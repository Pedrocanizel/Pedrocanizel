#################################################################

print(globals()) #Imprime pra você todas as variáveis globais presente dentro do seu ambiente de desenvolvimento, se limita ao módulo que você está desenvolvendo

print(locals()) #Imprime as variáveis locais para você, interno a uma função, classe por exemplo

função de alta ordem é um função que recebe outra como argumento, exemplo abaixo:
def executar(f, n=1): #f no caso é uma função que entrará como argumento, 1 é o valor base, que poderá mudar
    for _ in range(n): #Dessa forma eu faço com que o valor passado no n seja a quantidade de vezes que o python executa a função f()
        f()

#################################################################
import operator

#################################################################
pure/impure function

var_a = 20

def pure_func(x, y):
    z = x * y
    return z

print(pure_func(4, 5))

def impure_func(w):
    q = w * var_a
    return q

print(impure_func(4))

#################################################################
contador/count caracter

def is_unique(string: str) -> bool:
    caracter_seen = {}

    for caracter in string:
        if caracter_seen.get(caracter):
            return false
        caracter_seen[caracter] = True

    return True

#################################################################

list = {'x':1, 'y':2, 'z':3}

print(list.__getitem__('x'))

#################################################################


formatted_strings = []

# Iterate through the DataFrame rows
for index, row in df.iterrows():
    row_string = ""
    for column, value in row.iteritems():
        # Format the string as "column_name: value"
        row_string += f"{column}: {value}, "
    formatted_strings.append(row_string.rstrip(', '))


import pandas as pd

# Create a Pandas DataFrame (you can replace this with your actual DataFrame)
data = {'id': [1, 2, 3],
        'name': ['Alice', 'Bob', 'Charlie'],
        'age': [25, 30, 35]}
df = pd.DataFrame(data)

# Initialize an empty list to store the formatted strings
formatted_strings = []

# Iterate through the DataFrame rows
for index, row in df.iterrows():
    row_values = [f"{value}" for value in row.values]
    row_string = "(" + ", ".join(row_values) + ")"
    formatted_strings.append(row_string)

# Concatenate the formatted strings with commas between them
result = ", ".join(formatted_strings)

# Print the result
print(result)


Criando entre aspas, in quotes
import pandas as pd

# Create a Pandas DataFrame (you can replace this with your actual DataFrame)
data = {'id': [1, 2, 3],
        'name': ['Alice', 'Bob', 'Charlie'],
        'age': [25, 30, 35]}
df = pd.DataFrame(data)

# Initialize an empty list to store the formatted strings
formatted_strings = []

# Iterate through the DataFrame rows
for index, row in df.iterrows():
    row_values = [f"'{value}'" for value in row.values]
    row_string = "(" + ", ".join(row_values) + ")"
    formatted_strings.append(row_string)

# Concatenate the formatted strings with commas between them
result = ", ".join(formatted_strings)

# Print the result
print(result)

##########################################

Query final pronta

import pandas as pd

# Create a Pandas DataFrame (you can replace this with your actual DataFrame)
data = {'id': [1, 2, 3],
        'name': ['Alice', 'Bob', 'Charlie'],
        'age': [25, 30, 35]}
df = pd.DataFrame(data)

# Initialize an empty list to store the formatted strings
formatted_strings = []

# Iterate through the DataFrame rows
for index, row in df.iterrows():
    row_values = [f"'{value}'" for value in row.values]
    row_string = "(" + ", ".join(row_values) + ")"
    formatted_strings.append(row_string)

# Concatenate the formatted strings with commas between them
values_string = ", ".join(formatted_strings)

# Define the SQL query
schema = 'your_schema'
table = 'your_table'
columns = ', '.join(df.columns)  # Assuming all DataFrame columns are being inserted

# Combine the SQL query with the values string
query = f'INSERT INTO {schema}.{table} ({columns}) VALUES {values_string};'

# Print the SQL query
print(query)

###################################################


from datetime import datetime

# Your date string
date_str = '2023-10-01'

# Convert the date string to a datetime object
date_obj = datetime.strptime(date_str, '%Y-%m-%d')

# Extract the month and save it in another variable
month = date_obj.month

# Print the extracted month
print(f'Month: {month}')


from datetime import datetime, timedelta

# Your date string
date_str = '2023-10-01'

# Convert the date string to a datetime object
date_obj = datetime.strptime(date_str, '%Y-%m-%d')

# Extract the month from the date
month = date_obj.month

# Calculate the first day of the month
first_day = date_obj.replace(day=1, month=month)

# Calculate the last day of the month by adding one month and subtracting one day
last_day = (first_day.replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)

# Format the first and last days as strings in 'YYYY-MM-DD' format
first_day_str = first_day.strftime('%Y-%m-%d')
last_day_str = last_day.strftime('%Y-%m-%d')

# Print the first and last days of the month
print(f'First Day of the Month: {first_day_str}')
print(f'Last Day of the Month: {last_day_str}')

# Your current month
month = date_obj.month

# Calculate the last month
if month == 1:
    # If the current month is January (1), set the last month to December (12)
    last_month = 12
else:
    # For other months, subtract 1 to get the last month
    last_month = month - 1

# Print the last month
print(f'Last Month: {last_month}')


exec_date = datetime.strptime(exec_date, '%Y-%m-%d')




